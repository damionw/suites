#! /usr/bin/env bash

scriptfile="${BASH_SOURCE[0]}"

reactor::depends() {
   :
}

reactor::run() {
    local _task="${1}"
    local _shell="$(which bash)"
    local _port="$(http::listen_port)"

    http::logging "Started webserver on port ${_port}"

    exec ncat -l ${_port} -k --sh-exec "'${_shell}' -c '. $(script::file); http::handle_request'"
}

#===================================================================================
#                             Script Info
#===================================================================================
script::file() {
    echo "${scriptfile}"
}

#===================================================================================
#                              Request Handlers
#===================================================================================
request::suite_status() {
    "${SUITE_SCRIPT}" --suite="$(dirname "$(script::file)")" --status | http::reply_json
}

request::index() {
    sed -e 's/^            //g' <<"    EOF" | http::reply_html
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
        <html lang="en-US">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
                <title>Test</title>

                <style type="text/css">
                    height, body {
                        font-family: Helvetica, Arial, Verdana, Sans-Serif;
                        background: #fefefe;
                        height: 100%;
                        width: 100%;
                        margin: 0;
                        padding: 0;
                    }
                </style>
            </head>
            <body>
                <div>
                    <span class="title">
                        This is banner text
                    </span>

                    <div id="tabbed_content">
                        <div><p>Ispum schmipsum.</p></div>
                        <div><p>How am I doing.</p></div>
                        <div><p>Hello.</p></div>
                        <div><p>No way</p></div>
                    </div>
                </div>
            </body>
        </html>
    EOF
}

#===================================================================================
#                                Headers
#===================================================================================
header::server_type() {
    echo "Server: ${HTTP_SCRIPT}"
}

header::text_html() {
    echo "Content-Type" "text/html"
}

header::text_plain() {
    echo "Content-Type" "text/plain"
}

header::application_json() {
    echo "Content-Type" "application/json"
}

#===================================================================================
#                                HTTP Handlers
#===================================================================================
http::logging() {
    local _retval=$?
    echo -e "$(date '+%Y-%m-%d %H:%M:%S'): $*" >&2
    return $_retval
}

http::listen_port() {
    echo 8089
}

http::reply() {
    # Content comes in via stdin, http code, http version, and headers come in as args

    format_response() {
        local _row

        while read _row
        do
            echo -n -e "${_row}\r\n"
        done
    }

    local _code="${1}"
    local _version="${2}"
    local _headers="${3}"

    local HTTP_CODE=(
        [200]="OK"
        [400]="Bad Request"
        [403]="Forbidden"
        [404]="Not Found"
        [405]="Method Not Allowed"
        [500]="Internal Server Error"
    )

    {
        echo "${_version} ${_code} ${HTTP_CODE[${_code}]}"
        echo "${_headers}"
        echo
        cat
    } | format_response
}

http::400_error() {
    echo | http::reply 400 "HTTP/1.1" "$(
        echo "Server: ${HTTP_SCRIPT}"
    )"
}

http::404_error() {
    echo "Not found" | http::reply 404 "HTTP/1.1" "$(
        echo "Server: ${HTTP_SCRIPT}"
    )"
}

http::reply_html() {
    http::reply 200 "HTTP/1.1" "$(
        header::server_type
        header::text_html
    )"
}

http::reply_json() {
    http::reply 200 "HTTP/1.1" "$(
        header::server_type
        header::application_json
    )"
}

http::handle_request() {
    local _row
    local _method
    local _request
    local _version
    local _url_index=
    local _headers=
    local _handled=false

    if ! read _method _request _version
    then
        http::400_error
        return 255
    fi

    http::logging "${_method}" "${_request}"

    local _headers="$(
        while read -t 0.01 _row
        do
            echo "${_row}"
        done | sed -e 's/\r//g' -e '/^[ ]*$/d'
    )"

    local _url_regex=(
        '^\/$'
        '^\/index.html$'
        '^\/api\/status[\/]*$'
    )

    local _url_handlers=(
        request::index
        request::index
        request::suite_status
    )

    case "${_method}" in
        "GET")
            for ((_url_index=0; _url_index < ${#_url_regex[@]}; ++_url_index))
            do
                local _regex="${_url_regex[${_url_index}]}"
                local _handler="${_url_handlers[${_url_index}]}"

                if [ -n "$(echo "${_request}" | awk "/${_regex}/"'{print $1;}')" ]
                then
                    "${_handler}" "${_method}" "${_request}" "${_headers}"
                    _handled=true
                    break
                fi
            done

            if ! ${_handled}
            then
                http::404_error
            fi
            ;;

        "POST")
            ;;
    esac
}

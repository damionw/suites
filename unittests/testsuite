#! /usr/bin/env bash

suite_script="$(which suites)"
this_pid=$BASHPID # Don't grab this inside a subprocess !
source="$(awk '/__________________ UNITTEST SENTINEL ___________________/ {exit 0;} {print $0;}' < "${suite_script}")"
tests_folder="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
selection=$@

test_basic() {
    local success=true

    start_supervisor
    sleep 6
    pid=$(get_supervisor_status)

    test -n "${pid}" || success=false
    test "${pid}" != "null" || success=false
    test -d /proc/${pid} || success=false
    test "$(get_dependency_list | wc -l)" = 1 || success=false

    expected_tasks="$(
        echo "task1"
        echo "task2"
    )"

    tasks="$(get_task_order)"

    test "${tasks}" = "${expected_tasks}" || success=false

    for _task in ${tasks}
    do
        (get_task_status "${_task}" | grep -q '^[0-9][0-9]*$') || success=false
    done

    send_dependency_deregistration_request "${PARENT_PID}"
    sleep 8

    pid=$(get_supervisor_status)

    test "${pid}" = "null" || success=false

    $success
}

test_graph() {
    local success=true

    expected_result() {
        sed -e 's/^            //g' <<'        EOF'
            task1
            task2
            task3
            task4
            task5
            task6
            task7
            task8
            task9
        EOF
    }

    if ! output="$(diff --side-by-side <(expected_result) <(get_task_order))"
    then
        log "${output}"
        success=false
    fi
    
    expected_result() {
        sed -e 's/^            //g' <<'        EOF'
            task2
            task4
            task5
            task8
            task9
        EOF
    }

    if ! output="$(diff --side-by-side <(expected_result) <(get_task_order_from_graph "$(get_tasks_subgraph task2)"))"
    then
        log "${output}"
        success=false
    fi

    $success
}

all_tests="$(declare -F | grep ' test_[^\ ][^\ ]*$' | sed -e 's/^declare -f //g')"

if [ -n "${selection}" ]
then
    regex='^('"$(echo "${selection}" | awk '{for (i=1; i <= NF; ++i) {printf("%stest_%s", sep, $i); sep="|";}}')"')$'
    all_tests="$(echo "${all_tests}" | egrep "${regex}")"
fi

eval "${source}"

PARENT_PID="$(get_process_parent "${this_pid}")"

success=true

for function_name in ${all_tests}
do
    test_name="$(echo "${function_name}" | sed -e 's/^test_//g')"

    if ! SUITE_LABEL="${function_name}" SUITE_SCRIPT="${suite_script}" SUITE_FOLDER="${tests_folder}/${test_name}" "${function_name}"
    then
        log "${function_name}=fail"
        success=false
    else
        log "${function_name}=success"
    fi
done

exec $success

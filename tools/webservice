#! /usr/bin/env bash

scriptfile="${BASH_SOURCE[0]}"

reactor::depends() {
   :
}

reactor::run() {
    local _task="${1}"
    local _shell="$(which bash)"
    local _port="$(http::listen_port)"

    http::logging "Started webserver on port ${_port}"

    exec ncat -l ${_port} -k --sh-exec "'${_shell}' -c '. $(script::file); http::handle_request'"
}

#===================================================================================
#                             Script Info
#===================================================================================
script::file() {
    echo "${scriptfile}"
}

#===================================================================================
#                              Request Handlers
#===================================================================================
response::static_file() {
    local _method="${1}"
    local _request="${2}"
    local _headers="${3}"
    local _filename="$(dirname "$(script::file)")/static/$(basename "${_request}")"
    local _extension="$(echo "${_filename}" | awk -F. '{print $NF;}' | tr '[A-Z]' '[a-z]')"

    if [ ! -f "${_filename}" ]
    then
        http::404_error
        return 255
    fi

    case "${_extension}" in
        html)
            http::response_html
            ;;

        js)
            http::response_javascript
            ;;

        json)
            http::response_json
            ;;

        css)
            http::response_css
            ;;

        *)
            http::response 200 "HTTP/1.1" "$(
                header::server_type
                echo "Content-Type: $(file -b --mime-type "${_filename}")"
            )"
            ;;
    esac < "${_filename}"
}

response::suite_status() {
    "${SUITE_SCRIPT}" --suite="$(dirname "$(script::file)")" --status | http::response_json
}

#===================================================================================
#                                Headers
#===================================================================================
header::server_type() {
    echo "Server: ${HTTP_SCRIPT}"
}

header::text_html() {
    echo "Content-Type: text/html"
}

header::text_plain() {
    echo "Content-Type: text/plain; charset=utf-8"
}

header::application_json() {
    echo "Content-Type: application/json"
}

header::application_javascript() {
    echo "Content-Type: application/javascript"
}

header::text_css() {
    echo "Content-Type: text/css"
}

header::content_length() {
    test "${1}" -gt 0 && echo "Content-Length: ${1}"
}

#===================================================================================
#                                TCP/IP
#===================================================================================
tcp::available_ports() {
    start_port=${1:-9000}
    protocol=${2:-tcp}

    address_family=$(echo ${protocol}4 | sed -e 's/^[^0-9]*//g' | dd bs=1 count=1 2>/dev/null)
    protocol=$(echo ${protocol} | sed -e 's/[0-9].*$//g')

    netstat -ln --${protocol} -${address_family} |
    awk '{print $4;}' |
    awk -F: '{print $2;}' |
    sed -e '/^[ ]*$/d' |
    sort -n |
    awk '{
        for (; i < $1; ++i)
        {
            print i;
        }

        if (i == $1)
        {
            ++i;
        }
    }' i=${start_port}
}

tcp::unused_port() {
    tcp::available_ports $* | head -1
}

#===================================================================================
#                                HTTP Handlers
#===================================================================================
http::logging() {
    local _retval=$?
    echo -e "$(date '+%Y-%m-%d %H:%M:%S'): $*" >&2
    return $_retval
}

http::listen_port() {
    tcp::unused_port
}

http::response() {
    # Content comes in via stdin, http code, http version, and headers come in as args

    format_response() {
        local _row

        while read _row
        do
            echo -n -e "${_row}\r\n"
        done
    }

    local _code="${1}"
    local _version="${2}"
    local _headers="${3}"

    local HTTP_CODE=(
        [200]="OK"
        [400]="Bad Request"
        [403]="Forbidden"
        [404]="Not Found"
        [405]="Method Not Allowed"
        [500]="Internal Server Error"
    )

#    local _content="$(cat)"

    {
        echo "${_version} ${_code} ${HTTP_CODE[${_code}]}"
        echo "${_headers}"
#        header::content_length $(echo -n "${_content}" | wc -c)
        echo
        cat
    } # | format_response
}

http::400_error() {
    echo | http::response 400 "HTTP/1.1" "$(
        echo "Server: ${HTTP_SCRIPT}"
    )"
}

http::404_error() {
    echo "Not found" | http::response 404 "HTTP/1.1" "$(
        echo "Server: ${HTTP_SCRIPT}"
    )"
}

http::response_html() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::text_html
    )"
}

http::response_json() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::application_json
    )"
}

http::response_css() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::text_css
    )"
}

http::response_javascript() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::application_javascript
    )"
}

http::response_plain() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::text_plain
    )"
}

http::handle_request() {
    local _method
    local _request
    local _version

    if ! read _method _request _version
    then
        http::400_error
        return 255
    fi

    http::logging "${_method}" "${_request}"

    local _row

    local _headers="$(
        while read -t 0.01 _row
        do
            echo "${_row}"
        done | sed -e 's/\r//g' -e '/^[ ]*$/d'
    )"

    local _url_regex=(
        [0]='^\/$'
        [1]='^\/index.html$'
        [2]='^\/api\/status[\/]*$'
        [3]='^\/static\/.*$'
    )

    local _get_handlers=(
        [0]=response::index
        [1]=response::index
        [2]=response::suite_status
        [3]=response::static_file
    )

    local _post_handlers=(
    )

    local _handler
    local _url_index

    for ((_url_index=0; _url_index < ${#_url_regex[@]}; ++_url_index))
    do
        local _regex="${_url_regex[${_url_index}]}"
        local _handler="${_url_handlers[${_url_index}]}"

        if [ -z "$(echo "${_request}" | awk "/${_regex}/"'{print $1;}')" ]
        then
            continue
        fi

        case "${_method}" in
            "GET")
                _handler="${_get_handlers[${_url_index}]}"
                ;;

            "POST")
                _handler="${_post_handlers[${_url_index}]}"
                ;;
        esac

        break
    done

    "${_handler:-"http::404_error"}" "${_method}" "${_request}" "${_headers}" | unix2dos
}

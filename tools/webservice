#! /usr/bin/env bash

scriptfile="${BASH_SOURCE[0]}"

reactor::depends() {
   :
}

reactor::run() {
    local _task="${1}"
    local _shell="$(which bash)"
    local _port="$(http::listen_port)"

    http::logging "Started webserver on port ${_port}"

    exec ncat -l ${_port} -k --sh-exec "'${_shell}' -c '. $(script::file); http::handle_request'"
}

#===================================================================================
#                             Script Info
#===================================================================================
script::file() {
    echo "${scriptfile}"
}

#===================================================================================
#                              Request Handlers
#===================================================================================
response::suite_status() {
    "${SUITE_SCRIPT}" --suite="$(dirname "$(script::file)")" --status | http::response_javascripton
}

response::index() {
    sed -e 's/^            //g' <<"    EOF" | http::response_html
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
        <html lang="en-US">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
                <title>Test</title>
                <link rel="stylesheet" href="/static/layout.css" media="screen">
                <script type="text/javascript" language="javascript" src="/static/ajax.js"></script>
            </head>
            <body>
                <div class=layout>
                    <div>
                        Hello
                    </div>
                    <div>
                        Goodbye
                    </div>
                </div>
            </body>
        </html>
    EOF
}

response::layout_css() {
    sed -e 's/^            //g' <<"    EOF" | http::response_css
        body, html {
            margin: 0;
            height: 100%;
            background: beige;
            padding: 0;
            width: 100%;
            overflow:hidden;
        }

        .layout {
            flex-direction: row;
            display: flex;
            width: 100%;
            height: auto;
            height: 100%;
            margin: 0;
            overflow: hidden;
        }

        .layout > div {
            height: 100%;
            display: table-cell;
            margin: 0;
            padding-left: 5px;
            background: white;
        }

        .layout > last-child {
            flex-grow: 1;
            background: #373737;
            min-width: 117px;
            max-width: 117px;
        }
    EOF
}

response::ajax_functions() {
    sed -e 's/^            //g' <<"    EOF" | http::response_javascript
        /* USAGE: function my_request(){
            ajaxFunction(
                "/ajax/my_url",

                function(ajax_result){
                },

                function(ajax_exception){
                }
            );
        }
        */

        function ajaxException(url, message){
            this.typename = "ajaxException";
            this.ajaxException = 1;
            this.message = message;
            this.url = url;
        }

        ajaxException.prototype.toString = function(){
            return this.typename + "(" + this.url + ") :" + this.message;
        }

        function ajaxFunction(url, result_callback, error_callback, method, data){
            var ajaxRequest;  // The variable that makes Ajax possible!

            if (method == null || method == undefined) {
                method = "GET";
            }

            if (data == null || data == undefined) {
                data = "";
            }
            else {
                data = JSON.stringify(data);
                method = "POST"; // data being sent in the body requires POST
            }

            try{
                // Opera 8.0+, Firefox, Safari
                ajaxRequest = new XMLHttpRequest();
            }
            catch(e){
                // Internet Explorer Browsers
                try{
                    ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
                }
                catch(e){
                    try{
                        ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
                    }
                    catch(e){
                        alert("Your browser broke!");
                        return false;
                    }
                }
            }

            ajaxRequest.onreadystatechange = function(){
                if (ajaxRequest.readyState != 4 ||  typeof (error_callback) != "function"){
                    return;
                }
                else if (ajaxRequest.status != 200){
                    error_callback(new ajaxException(url, "&lt;unavailable&gt;"));
                }
                else{
                    result_callback(eval("(" + ajaxRequest.responseText + ")"));
                }
            }

            ajaxRequest.open(method, url, true); // Don't forget to escape() query string values
            ajaxRequest.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT")

            if (method == "POST") {
                ajaxRequest.setRequestHeader("Content-type", "application/json;charset=UTF-8");
        //         ajaxRequest.setRequestHeader("Content-length", data.length);
        //         ajaxRequest.setRequestHeader("Connection", "close");
            }

            ajaxRequest.send(data);
        }
    EOF
}

#===================================================================================
#                                Headers
#===================================================================================
header::server_type() {
    echo "Server: ${HTTP_SCRIPT}"
}

header::text_html() {
    echo "Content-Type" "text/html"
}

header::text_plain() {
    echo "Content-Type" "text/plain"
}

header::application_json() {
    echo "Content-Type" "application/json"
}

header::text_javascript() {
    echo "text/javascript"
}

header::text_css() {
    echo "text/css"
}

#===================================================================================
#                                TCP/IP
#===================================================================================
tcp::available_ports() {
    start_port=${1:-9000}
    protocol=${2:-tcp}

    address_family=$(echo ${protocol}4 | sed -e 's/^[^0-9]*//g' | dd bs=1 count=1 2>/dev/null)
    protocol=$(echo ${protocol} | sed -e 's/[0-9].*$//g')

    netstat -ln --${protocol} -${address_family} |
    awk '{print $4;}' |
    awk -F: '{print $2;}' |
    sed -e '/^[ ]*$/d' |
    sort -n |
    awk '{
        for (; i < $1; ++i)
        {
            print i;
        }

        if (i == $1)
        {
            ++i;
        }
    }' i=${start_port}
}

tcp::unused_port() {
    tcp::available_ports $* | head -1
}

#===================================================================================
#                                HTTP Handlers
#===================================================================================
http::logging() {
    local _retval=$?
    echo -e "$(date '+%Y-%m-%d %H:%M:%S'): $*" >&2
    return $_retval
}

http::listen_port() {
    tcp::unused_port
}

http::response() {
    # Content comes in via stdin, http code, http version, and headers come in as args

    format_response() {
        local _row

        while read _row
        do
            echo -n -e "${_row}\r\n"
        done
    }

    local _code="${1}"
    local _version="${2}"
    local _headers="${3}"

    local HTTP_CODE=(
        [200]="OK"
        [400]="Bad Request"
        [403]="Forbidden"
        [404]="Not Found"
        [405]="Method Not Allowed"
        [500]="Internal Server Error"
    )

    {
        echo "${_version} ${_code} ${HTTP_CODE[${_code}]}"
        echo "${_headers}"
        echo
        cat
    } | format_response
}

http::400_error() {
    echo | http::response 400 "HTTP/1.1" "$(
        echo "Server: ${HTTP_SCRIPT}"
    )"
}

http::404_error() {
    echo "Not found" | http::response 404 "HTTP/1.1" "$(
        echo "Server: ${HTTP_SCRIPT}"
    )"
}

http::response_html() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::text_html
    )"
}

http::response_javascripton() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::application_json
    )"
}

http::response_css() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::text_css
    )"
}

http::response_javascript() {
    http::response 200 "HTTP/1.1" "$(
        header::server_type
        header::text_javascript
    )"
}

http::handle_request() {
    local _row
    local _method
    local _request
    local _version
    local _url_index=
    local _headers=
    local _handled=false

    if ! read _method _request _version
    then
        http::400_error
        return 255
    fi

    http::logging "${_method}" "${_request}"

    local _headers="$(
        while read -t 0.01 _row
        do
            echo "${_row}"
        done | sed -e 's/\r//g' -e '/^[ ]*$/d'
    )"

    local _url_regex=(
        '^\/$'
        '^\/index.html$'
        '^\/api\/status[\/]*$'
        '^\/static\/ajax.js$'
        '^\/static\/layout.css$'
    )

    local _url_handlers=(
        response::index
        response::index
        response::suite_status
        response::ajax_functions
        response::layout_css
    )

    case "${_method}" in
        "GET")
            for ((_url_index=0; _url_index < ${#_url_regex[@]}; ++_url_index))
            do
                local _regex="${_url_regex[${_url_index}]}"
                local _handler="${_url_handlers[${_url_index}]}"

                if [ -n "$(echo "${_request}" | awk "/${_regex}/"'{print $1;}')" ]
                then
                    "${_handler}" "${_method}" "${_request}" "${_headers}"
                    _handled=true
                    break
                fi
            done

            if ! ${_handled}
            then
                http::404_error
            fi
            ;;

        "POST")
            ;;
    esac
}
